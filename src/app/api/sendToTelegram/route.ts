// src/app/api/sendToTelegram/route.ts
import { NextResponse } from 'next/server';

export const runtime = 'nodejs'; // –Ω—É–∂–µ–Ω Node runtime –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FormData/–≤–Ω–µ—à–Ω–∏–º API

export async function POST(req: Request) {
  try {
    const form = await req.formData();

    const name = String(form.get('name') || '').trim();
    const phone = String(form.get('phone') || '').trim();
    const selections = String(form.get('selections') || '').trim();   // "bed-loft-a,desk-work-b"
    const categories = String(form.get('categories') || '').trim();   // "BEDS,DESKS"
    const photo = form.get('photo') as File | null;

    if (!name || !phone) {
      return NextResponse.json({ ok: false, error: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω' }, { status: 400 });
    }

    const token = process.env.TELEGRAM_BOT_TOKEN!;
    const chatId = process.env.TELEGRAM_ADMIN_CHAT_ID!;
    if (!token || !chatId) {
      return NextResponse.json({ ok: false, error: 'No Telegram env' }, { status: 500 });
    }

    const caption =
      `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n` +
      `–ò–º—è: ${name}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` +
      (categories ? `–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories}\n` : '') +
      (selections ? `–ú–æ–¥–µ–ª–∏: ${selections}\n` : '');

    // 1) –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
    await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text: caption }),
    });

    // 2) –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if (photo) {
      const tgForm = new FormData();
      tgForm.append('chat_id', chatId);
      tgForm.append('caption', '–§–æ—Ç–æ –∫–æ–º–Ω–∞—Ç—ã');
      tgForm.append('photo', photo, (photo as File).name || 'room.jpg');

      await fetch(`https://api.telegram.org/bot${token}/sendPhoto`, {
        method: 'POST',
        body: tgForm,
      });
    }

    return NextResponse.json({ ok: true });
  } catch (e: any) {
    console.error('sendToTelegram error', e);
    return NextResponse.json({ ok: false, error: e?.message || 'server error' }, { status: 500 });
  }
}
